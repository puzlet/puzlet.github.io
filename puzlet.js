// Generated by CoffeeScript 1.3.3

/*

Puzlet Bootstrap

Handles these Puzlet hosts:

1. org.github.io - GitHub organization.  Everything loaded from GitHub (loader is //puzlet.org/puzlet/js/loader.js)
2. puzlet.org - Known custom domain (can set others here).  As above.
3. custom-domain.org - Unknown custom domain.  Requires /CNAME and /owner.json.  Otherwise, as above.
4. localhost:port/path/repo - Local development.  Usually path=org.  Requires /puzlet.json.  Should have empty /CNAME to avoid GET errors.
5. deployment.com/path/repo - Deployment server.  Same as 4, but path likely not org.

puzlet.json tells Puzlet the local folder coresponding to a GitHub organization (e.g., for /org/repo/file.ext in resources.coffee).
If the organization/folder does not exist in puzlet.json, Puzlet will use GitHub to get an organization's resources.

If the *current* blab's organization is not in puzlet.json, Puzlet will try to use the blab's URL to determine the organization name:
host.com/path/org/repo

For all host types, this bootstrap sets $blab.gitHub, which contains GitHub-related information:
owner, repo, host, local config.

jQuery is loaded.
*/


(function() {
  var cnameFile, configFile, getGitHub, gitHubIo, jQueryCache, jQuerySource, knownGitHubOrgDomains, loadFile, loadScript, loaderPath, ownerFile, puzletOrg;

  puzletOrg = "http://puzlet.org";

  loaderPath = "/puzlet/js/loader.js";

  gitHubIo = "org.github.io";

  knownGitHubOrgDomains = [
    {
      domain: "puzlet.org",
      org: "puzlet"
    }
  ];

  cnameFile = "/CNAME";

  ownerFile = "/owner.json";

  configFile = "/puzlet.json";

  jQuerySource = "//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js";

  if (window.console == null) {
    window.console = {};
  }

  if (window.console.log == null) {
    window.console.log = (function() {});
  }

  console.log("Puzlet bootstrap");

  loadScript = function(url, cache, onLoad, onError) {
    var script;
    if (cache == null) {
      cache = false;
    }
    if (onLoad == null) {
      onLoad = (function() {});
    }
    if (onError == null) {
      onError = (function() {});
    }
    script = document.createElement("script");
    script.setAttribute("src", url + (cache ? "" : "?t=" + (Date.now())));
    script.onload = onLoad;
    script.onerror = onError;
    return document.head.appendChild(script);
  };

  loadFile = function(file, callback) {
    return $.ajax({
      url: file + ("?t=" + (Date.now())),
      error: function() {
        return callback(null);
      },
      success: function(data) {
        return callback(data);
      }
    });
  };

  getGitHub = function(callback) {
    var a, customDomains, getLocalConfig, gh, gitHub, host, hostname, isGitHubIo, path, pathname;
    gitHub = {
      isGitHubHosted: false,
      localConfig: null,
      owner: null,
      repo: null
    };
    a = document.createElement("a");
    a.href = window.location.href;
    hostname = a.hostname;
    pathname = a.pathname;
    host = hostname.split(".");
    gh = gitHubIo.split(".");
    path = pathname.split("/");
    gitHub.repo = path.slice(-2, -1)[0];
    isGitHubIo = host.length === 3 && host[1] === gh[1] && host[2] === gh[2];
    if (isGitHubIo) {
      gitHub.isGitHubHosted = true;
      gitHub.owner = host[0];
      callback(gitHub);
      return;
    }
    customDomains = knownGitHubOrgDomains.filter(function(d) {
      return hostname === d.domain;
    });
    if (customDomains.length > 0) {
      gitHub.isGitHubHosted = true;
      gitHub.owner = customDomains[0].org;
      callback(gitHub);
      return;
    }
    getLocalConfig = function() {
      return loadFile(configFile, function(config) {
        var org, p, _ref, _ref1;
        gitHub.localConfig = config;
        if ((config != null ? config.orgs : void 0) != null) {
          _ref = config.orgs;
          for (org in _ref) {
            p = _ref[org];
            if (pathname.indexOf(p) === 0) {
              gitHub.owner = org;
              break;
            }
          }
        }
        if ((_ref1 = gitHub.owner) == null) {
          gitHub.owner = path.length > 2 ? path.slice(-3, -2)[0] : null;
        }
        return callback(gitHub);
      });
    };
    return $.ajax({
      url: cnameFile,
      error: function() {
        gitHub.isGitHubHosted = false;
        return getLocalConfig();
      },
      success: function(data) {
        var ghHosted;
        ghHosted = data === hostname;
        gitHub.isGitHubHosted = ghHosted;
        if (ghHosted) {
          return loadFile(ownerFile, function(owner) {
            gitHub.owner = owner;
            return callback(gitHub);
          });
        } else {
          return getLocalConfig();
        }
      }
    });
  };

  window.$blab = {};

  jQueryCache = true;

  loadScript(jQuerySource, jQueryCache, function() {
    return getGitHub(function(gitHub) {
      var ghHosted, loaderUrl, localPuzlet, _ref, _ref1;
      $blab.gitHub = gitHub;
      ghHosted = gitHub.isGitHubHosted;
      console.log("Host: " + (ghHosted ? "GitHub" : "local/deployment"));
      if (ghHosted) {
        loaderUrl = puzletOrg + loaderPath;
      } else {
        localPuzlet = (_ref = gitHub.localConfig) != null ? (_ref1 = _ref.orgs) != null ? _ref1.puzlet : void 0 : void 0;
        loaderUrl = (localPuzlet != null ? localPuzlet : puzletOrg) + loaderPath;
      }
      console.log("Load Puzlet (" + loaderUrl + ")");
      return loadScript(loaderUrl);
    });
  });

}).call(this);
