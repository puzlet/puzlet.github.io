// Generated by CoffeeScript 1.3.3
(function() {
  var Ace, ArrayMath, AxesLabels, BlabCoffee, BlabPlotter, BlabPrinter, CodeNodeComment, CodeNodeFunction, CoffeeEvaluator, CoffeeResource, ComplexMath, CssResourceInline, CssResourceLinked, EvalBoxPlotter, FavIcon, Figure, GithubRibbon, HtmlResource, JsResourceInline, JsResourceLinked, JsonResource, Loader, MathJaxProcessor, NumericFunctions, Page, Resource, ResourceInline, Resources, ScalarMath, TypeMath, getBlabFromQuery, init,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BlabCoffee = (function() {

    BlabCoffee.prototype.predefinedCoffee = "nm = numeric\nsize = nm.size\nmax = nm.max\nabs = nm.abs\npow = nm.pow\nsqrt = nm.sqrt\nexp = nm.exp\nlog = nm.log\nsin = nm.sin\ncos = nm.cos\ntan = nm.tan\nasin = nm.asin\nacos = nm.acos\natan = nm.atan\natan2 = nm.atan2\nceil = nm.ceil\nfloor = nm.floor\nround = nm.round\nrand = nm.rand\ncomplex = nm.complex\nconj = nm.conj\nlinspace = nm.linspace\nprint = nm.print\nplot = nm.plot\nplotSeries = nm.plotSeries\neplot = nm.plot\nfigure = nm.figure\npi = Math.PI\nj = complex 0, 1\nprint.clear()\neplot.clear()";

    BlabCoffee.prototype.basicOps = [["add", "add"], ["sub", "subtract"], ["mul", "multiply"], ["div", "divide"]];

    BlabCoffee.prototype.modOp = ["mod", "modulo"];

    BlabCoffee.prototype.eqOps = [["mod", "modulo"], ["eq", "equals"], ["lt", "lt"], ["gt", "gt"], ["leq", "leq"], ["geq", "geq"]];

    BlabCoffee.prototype.assignOps = ["addeq", "subeq", "muleq", "diveq", "modeq"];

    function BlabCoffee() {
      this.ops = this.basicOps.concat([this.modOp]).concat(this.eqOps);
      this.predefinedCoffeeLines = this.predefinedCoffee.split("\n");
    }

    BlabCoffee.prototype.initializeMath = function() {
      if (this.mathInitialized != null) {
        return;
      }
      window._$_ = PaperScript._$_;
      window.$_ = PaperScript.$_;
      new ScalarMath(this.ops);
      new ArrayMath(this.ops, this.assignOps);
      new ComplexMath(this.basicOps);
      new NumericFunctions;
      new BlabPrinter;
      new BlabPlotter;
      new EvalBoxPlotter;
      return this.mathInitialized = true;
    };

    BlabCoffee.prototype.compile = function(code, bare) {
      var codeLines, firstLine, js, lf, vanilla;
      if (bare == null) {
        bare = false;
      }
      lf = "\n";
      codeLines = code.split(lf);
      firstLine = codeLines[0];
      vanilla = firstLine === "#!vanilla";
      if (!vanilla) {
        this.initializeMath();
        codeLines = this.predefinedCoffeeLines.concat(codeLines);
        code = codeLines.join(lf);
      }
      js = CoffeeScript.compile(code, {
        bare: bare
      });
      if (!vanilla) {
        js = PaperScript.compile(js);
      }
      return js;
    };

    return BlabCoffee;

  })();

  TypeMath = (function() {

    function TypeMath(proto) {
      this.proto = proto;
    }

    TypeMath.prototype.setMethod = function(op) {
      return this.proto[op] = function(y) {
        return numeric[op](this, y);
      };
    };

    TypeMath.prototype.setUnaryMethod = function(op) {
      return this.proto[op] = function() {
        return numeric[op](this);
      };
    };

    TypeMath.prototype.overloadOperator = function(a, b) {
      return this.proto["__" + b] = this.proto[a];
    };

    return TypeMath;

  })();

  ScalarMath = (function(_super) {

    __extends(ScalarMath, _super);

    function ScalarMath(ops) {
      var a, b, op, _i, _len, _ref;
      this.ops = ops;
      ScalarMath.__super__.constructor.call(this, Number.prototype);
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        a = op[0], b = op[1];
        this.setMethod(a);
        this.overloadOperator(a, b);
      }
      this.proto.pow = function(p) {
        return Math.pow(this, p);
      };
    }

    ScalarMath.prototype.setMethod = function(op) {
      return this.proto[op] = function(y) {
        return numeric[op](+this, y);
      };
    };

    return ScalarMath;

  })(TypeMath);

  ArrayMath = (function(_super) {

    __extends(ArrayMath, _super);

    function ArrayMath(ops, assignOps) {
      var a, b, op, pow, _i, _j, _len, _len1, _ref, _ref1;
      this.ops = ops;
      this.assignOps = assignOps;
      ArrayMath.__super__.constructor.call(this, Array.prototype);
      this.proto.size = function() {
        return [this.length, this[0].length];
      };
      this.proto.max = function() {
        return Math.max.apply(null, this);
      };
      numeric.zeros = function(m, n) {
        return numeric.rep([m, n], 0);
      };
      numeric.ones = function(m, n) {
        return numeric.rep([m, n], 1);
      };
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        a = op[0], b = op[1];
        this.setMethod(a);
        this.overloadOperator(a, b);
      }
      _ref1 = this.assignOps;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        op = _ref1[_j];
        this.setMethod(op);
      }
      this.setMethod("dot");
      this.setUnaryMethod("neg");
      this.overloadOperator("neg", "negate");
      this.setUnaryMethod("clone");
      this.setUnaryMethod("sum");
      this.proto.transpose = function() {
        return numeric.transpose(this);
      };
      Object.defineProperty(this.proto, 'T', {
        get: function() {
          return this.transpose();
        }
      });
      pow = numeric.pow;
      this.proto.pow = function(p) {
        return pow(this, p);
      };
      numeric.rand = function(sz) {
        if (sz == null) {
          sz = null;
        }
        if (sz) {
          return numeric.random(sz);
        } else {
          return Math.random();
        }
      };
    }

    return ArrayMath;

  })(TypeMath);

  ComplexMath = (function(_super) {

    __extends(ComplexMath, _super);

    function ComplexMath(ops) {
      var complex, j, j2, negj, op, _i, _len, _ref;
      this.ops = ops;
      ComplexMath.__super__.constructor.call(this, numeric.T.prototype);
      numeric.complex = function(x, y) {
        if (y == null) {
          y = 0;
        }
        return new numeric.T(x, y);
      };
      complex = numeric.complex;
      this.proto.size = function() {
        return [this.x.length, this.x[0].length];
      };
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        this.defineOperators(op[0], op[1]);
      }
      this.proto.__negate = this.proto.neg;
      Object.defineProperty(this.proto, 'T', {
        get: function() {
          return this.transpose();
        }
      });
      Object.defineProperty(this.proto, 'H', {
        get: function() {
          return this.transjugate();
        }
      });
      this.proto.arg = function() {
        var x, y;
        x = this.x;
        y = this.y;
        return numeric.atan2(y, x);
      };
      this.proto.pow = function(p) {
        var a, nm, pa, r;
        nm = numeric;
        r = this.abs().x;
        a = this.arg();
        pa = a.mul(p);
        return complex(nm.cos(pa), nm.sin(pa)).mul(r.pow(p));
      };
      this.proto.sqrt = function() {
        return this.pow(0.5);
      };
      this.proto.log = function() {
        var a, r;
        r = this.abs().x;
        a = this.arg();
        return complex(numeric.log(r), a);
      };
      j = complex(0, 1);
      j2 = complex(0, 2);
      negj = complex(0, -1);
      this.proto.sin = function() {
        var e1, e2;
        e1 = (this.mul(j)).exp();
        e2 = (this.mul(negj)).exp();
        return (e1.sub(e2)).div(j2);
      };
      this.proto.cos = function() {
        var e1, e2;
        e1 = (this.mul(j)).exp();
        e2 = (this.mul(negj)).exp();
        return (e1.add(e2)).div(2);
      };
    }

    ComplexMath.prototype.defineOperators = function(op, op1) {
      var numericOld;
      numericOld = {};
      this.proto["__" + op1] = this.proto[op];
      numericOld[op] = numeric[op];
      return numeric[op] = function(x, y) {
        if (typeof x === "number" && y instanceof numeric.T) {
          return numeric.complex(x)[op](y);
        } else {
          return numericOld[op](x, y);
        }
      };
    };

    return ComplexMath;

  })(TypeMath);

  NumericFunctions = (function() {

    NumericFunctions.prototype.overrideFcns = ["sqrt", "sin", "cos", "exp", "log"];

    function NumericFunctions() {
      var f, nabs, natan2, nm, npow, _i, _len, _ref;
      _ref = this.overrideFcns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.override(f);
      }
      nm = numeric;
      npow = nm.pow;
      nm.pow = function(x, p) {
        if (x.pow != null) {
          return x.pow(p);
        } else {
          return npow(x, p);
        }
      };
      nabs = nm.abs;
      nm.abs = function(x) {
        if ((x.abs != null) && x instanceof nm.T) {
          return x.abs().x;
        } else {
          return nabs(x);
        }
      };
      natan2 = nm.atan2;
      nm.atan2 = function(y, x) {
        if (typeof x === "number" && typeof y === "number") {
          return Math.atan2(y, x);
        } else {
          return natan2(y, x);
        }
      };
    }

    NumericFunctions.prototype.override = function(name) {
      var f;
      f = numeric[name];
      return numeric[name] = function(x) {
        if (typeof x === "object" && (x[name] != null)) {
          return x[name]();
        } else {
          return f(x);
        }
      };
    };

    return NumericFunctions;

  })();

  BlabPrinter = (function() {

    function BlabPrinter() {
      var id, nm;
      nm = numeric;
      id = "blab_print";
      nm.print = function(x) {
        var container, htmlOut;
        container = $("#" + id);
        if (!container.length) {
          container = $("<div>", {
            id: id
          });
          htmlOut = $("#codeout_html");
          htmlOut.append(container);
        }
        return container.append("<pre>" + nm.prettyPrint(x) + "</pre>");
      };
      nm.print.clear = function() {
        var container;
        container = $("#" + id);
        if (container) {
          return container.empty();
        }
      };
    }

    return BlabPrinter;

  })();

  BlabPlotter = (function() {

    function BlabPlotter() {
      numeric.htmlplot = function(x, y, params) {
        var flot, htmlOut, _ref;
        if (params == null) {
          params = {};
        }
        flot = $("#flot");
        if (!flot.length) {
          flot = $("<div>", {
            id: "flot",
            css: {
              width: "600px",
              height: "300px"
            }
          });
          htmlOut = $("#codeout_html");
          htmlOut.append(flot);
        }
        if ((_ref = params.series) == null) {
          params.series = {
            color: "#55f"
          };
        }
        return $.plot($("#flot"), [numeric.transpose([x, y])], params);
      };
    }

    return BlabPlotter;

  })();

  EvalBoxPlotter = (function() {

    function EvalBoxPlotter() {
      var _this = this;
      this.container = $("#result_container");
      this.container.css({
        position: "absolute"
      });
      this.clear();
      numeric.plot = function(x, y, params) {
        if (params == null) {
          params = {};
        }
        return _this.plot(x, y, params);
      };
      numeric.plot.clear = function() {
        return _this.clear();
      };
      numeric.figure = function(params) {
        if (params == null) {
          params = {};
        }
        return _this.figure(params);
      };
      numeric.plotSeries = function(series, params) {
        if (params == null) {
          params = {};
        }
        return _this.plotSeries(series, params);
      };
      this.figures = [];
    }

    EvalBoxPlotter.prototype.clear = function() {
      this.plotCount = 0;
      return $(".eval_flot").remove();
    };

    EvalBoxPlotter.prototype.figure = function(params) {
      var flotId;
      if (params == null) {
        params = {};
      }
      flotId = "eval_plot_" + this.plotCount;
      this.figures[flotId] = new Figure(this.container, flotId, params);
      this.plotCount++;
      return flotId;
    };

    EvalBoxPlotter.prototype.plot = function(x, y, params) {
      var fig, flotId, _ref;
      if (params == null) {
        params = {};
      }
      flotId = (_ref = params.fig) != null ? _ref : this.figure(params);
      fig = this.figures[flotId];
      fig.plot(x, y);
      if (params.fig) {
        return null;
      } else {
        return flotId;
      }
    };

    EvalBoxPlotter.prototype.plotSeries = function(series, params) {
      var fig, flotId, _ref;
      if (params == null) {
        params = {};
      }
      flotId = (_ref = params.fig) != null ? _ref : this.figure(params);
      fig = this.figures[flotId];
      fig.plotSeries(series);
      if (params.fig) {
        return null;
      } else {
        return flotId;
      }
    };

    return EvalBoxPlotter;

  })();

  Figure = (function() {

    function Figure(container, flotId, params) {
      var _ref, _ref1,
        _this = this;
      this.container = container;
      this.flotId = flotId;
      this.params = params;
      this.w = this.container[0].offsetWidth;
      this.flot = $("<div>", {
        id: this.flotId,
        "class": "eval_flot",
        css: {
          position: "absolute",
          top: "0px",
          width: ((_ref = this.params.width) != null ? _ref : this.w - 50) + "px",
          height: ((_ref1 = this.params.height) != null ? _ref1 : 150) + "px",
          margin: "0px",
          marginLeft: "30px",
          marginTop: "20px",
          zIndex: 1
        }
      });
      this.container.append(this.flot);
      this.flot.hide();
      this.positioned = false;
      setTimeout((function() {
        return _this.setPos();
      }), 10);
    }

    Figure.prototype.setPos = function() {
      var e, idx, p, _i, _len, _ref, _ref1;
      p = null;
      _ref = $blab.evaluator;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        e = _ref[idx];
        if ((typeof e === "string") && e === this.flotId) {
          p = idx;
        }
      }
      if (!p) {
        return;
      }
      this.flot.css({
        top: "" + (p * 22) + "px"
      });
      this.flot.show();
      if ((_ref1 = this.axesLabels) != null) {
        _ref1.position();
      }
      return this.positioned = true;
    };

    Figure.prototype.plot = function(x, y) {
      var d, line, nLines, v, _base, _i, _len, _ref;
      if ((_ref = (_base = this.params).series) == null) {
        _base.series = {
          color: "#55f"
        };
      }
      if ((y != null ? y.length : void 0) && (y[0].length != null)) {
        nLines = y.length;
        d = [];
        for (_i = 0, _len = y.length; _i < _len; _i++) {
          line = y[_i];
          v = numeric.transpose([x, line]);
          d.push(v);
        }
      } else {
        d = [numeric.transpose([x, y])];
      }
      if (!this.positioned) {
        this.flot.show();
      }
      $.plot(this.flot, d, this.params);
      if (!this.positioned) {
        this.flot.hide();
      }
      this.axesLabels = new AxesLabels(this.flot, this.params);
      if (this.positioned) {
        return this.axesLabels.position();
      }
    };

    Figure.prototype.plotSeries = function(series) {
      var _base, _ref;
      if ((_ref = (_base = this.params).series) == null) {
        _base.series = {
          color: "#55f"
        };
      }
      if (!this.positioned) {
        this.flot.show();
      }
      $.plot(this.flot, series, this.params);
      if (!this.positioned) {
        this.flot.hide();
      }
      this.axesLabels = new AxesLabels(this.flot, this.params);
      if (this.positioned) {
        return this.axesLabels.position();
      }
    };

    return Figure;

  })();

  AxesLabels = (function() {

    function AxesLabels(container, params) {
      this.container = container;
      this.params = params;
      if (this.params.xlabel) {
        this.xaxisLabel = this.appendLabel(this.params.xlabel, "xaxisLabel");
      }
      if (this.params.ylabel) {
        this.yaxisLabel = this.appendLabel(this.params.ylabel, "yaxisLabel");
      }
    }

    AxesLabels.prototype.appendLabel = function(txt, className) {
      var label;
      label = $("<div>", {
        text: txt
      });
      label.addClass("axisLabel");
      label.addClass(className);
      this.container.append(label);
      return label;
    };

    AxesLabels.prototype.position = function() {
      var _ref, _ref1;
      if ((_ref = this.xaxisLabel) != null) {
        _ref.css({
          marginLeft: (-this.xaxisLabel.width() / 2 + 10) + "px",
          marginBottom: "-20px"
        });
      }
      return (_ref1 = this.yaxisLabel) != null ? _ref1.css({
        marginLeft: "-27px",
        marginTop: (this.yaxisLabel.width() / 2 - 10) + "px"
      }) : void 0;
    };

    return AxesLabels;

  })();

  /* Not used - to obsolete
  
  complexMatrices: ->
  	
  	Array.prototype.complexParts = ->
  		A = this
  		[m, n] = size A
  		vParts = (v) -> [(a.x for a in v), (a.y for a in v)]
  		if not n
  			# Vector
  			[real, imag] = vParts A
  		else
  			# Matrix
  			real = new Array m
  			imag = new Array m
  			[real[m], imag[m]] = vParts(row) for row, m in A
  		[real, imag]
  	
  	# These could be made more efficient.
  	Array.prototype.real = -> this.complexParts()[0]
  	Array.prototype.imag = -> this.complexParts()[1]
  	
  	#Array.prototype.isComplex = ->
  	#	A = this
  	#	[m, n] = size A
  
  manualOverloadExamples: ->
  	# Not currently used - using numericjs instead.
  	
  	Number.prototype.__add = (y) ->
  		# ZZZ is this inefficient for scaler x+y?
  		if typeof y is "number"
  			return this + y
  		else if y instanceof Array
  			return (this + yn for yn in y)
  		else
  			undefined
  
  	Array.prototype.__add = (y) ->
  		if typeof y is "number"
  			return (x + y for x in this)
  		else if y instanceof Array
  			return (x + y[n] for x, n in this)
  		else
  			undefined
  */


  Resource = (function() {

    function Resource(spec) {
      this.spec = spec;
      this.url = this.spec.url;
      this["var"] = this.spec["var"];
      this.fileExt = Resource.getFileExt(this.url);
      this.loaded = false;
      this.head = document.head;
    }

    Resource.prototype.load = function(callback, type) {
      var success, t,
        _this = this;
      if (type == null) {
        type = "text";
      }
      success = function(data) {
        _this.content = data;
        return _this.postLoad(callback);
      };
      t = Date.now();
      return $.get(this.url + ("?t=" + t), success, type);
    };

    Resource.prototype.postLoad = function(callback) {
      this.loaded = true;
      return typeof callback === "function" ? callback() : void 0;
    };

    Resource.prototype.isType = function(type) {
      return this.fileExt === type;
    };

    Resource.getFileExt = function(url) {
      var a, fileExt;
      a = document.createElement("a");
      a.href = url;
      return fileExt = (a.pathname.match(/\.[0-9a-z]+$/i))[0].slice(1);
    };

    Resource.typeFilter = function(types) {
      return function(resource) {
        var type, _i, _len;
        if (typeof types === "string") {
          return resource.isType(types);
        } else {
          for (_i = 0, _len = types.length; _i < _len; _i++) {
            type = types[_i];
            if (resource.isType(type)) {
              return true;
            }
          }
          return false;
        }
      };
    };

    return Resource;

  })();

  HtmlResource = (function(_super) {

    __extends(HtmlResource, _super);

    function HtmlResource() {
      return HtmlResource.__super__.constructor.apply(this, arguments);
    }

    return HtmlResource;

  })(Resource);

  ResourceInline = (function(_super) {

    __extends(ResourceInline, _super);

    function ResourceInline() {
      return ResourceInline.__super__.constructor.apply(this, arguments);
    }

    ResourceInline.prototype.load = function(callback) {
      var _this = this;
      return ResourceInline.__super__.load.call(this, function() {
        _this.element = $("<" + _this.tag + ">", {
          type: _this.mime,
          "data-url": _this.url
        });
        _this.element.text(_this.content);
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    ResourceInline.prototype.inDom = function() {
      return $("" + this.tag + "[data-url='" + this.url + "']").length;
    };

    ResourceInline.prototype.appendToHead = function() {
      if (!this.inDom()) {
        return this.head.appendChild(this.element[0]);
      }
    };

    return ResourceInline;

  })(Resource);

  CssResourceInline = (function(_super) {

    __extends(CssResourceInline, _super);

    function CssResourceInline() {
      return CssResourceInline.__super__.constructor.apply(this, arguments);
    }

    CssResourceInline.prototype.tag = "style";

    CssResourceInline.prototype.mime = "text/css";

    return CssResourceInline;

  })(ResourceInline);

  CssResourceLinked = (function(_super) {

    __extends(CssResourceLinked, _super);

    function CssResourceLinked() {
      return CssResourceLinked.__super__.constructor.apply(this, arguments);
    }

    CssResourceLinked.prototype.load = function(callback) {
      var _this = this;
      this.style = document.createElement("link");
      this.style.setAttribute("type", "text/css");
      this.style.setAttribute("rel", "stylesheet");
      this.style.setAttribute("href", this.url);
      setTimeout((function() {
        return _this.postLoad(callback);
      }), 0);
      return this.head.appendChild(this.style);
    };

    return CssResourceLinked;

  })(Resource);

  JsResourceInline = (function(_super) {

    __extends(JsResourceInline, _super);

    function JsResourceInline() {
      return JsResourceInline.__super__.constructor.apply(this, arguments);
    }

    JsResourceInline.prototype.tag = "script";

    JsResourceInline.prototype.mime = "text/javascript";

    return JsResourceInline;

  })(ResourceInline);

  JsResourceLinked = (function(_super) {

    __extends(JsResourceLinked, _super);

    function JsResourceLinked() {
      return JsResourceLinked.__super__.constructor.apply(this, arguments);
    }

    JsResourceLinked.prototype.load = function(callback) {
      var cache, t,
        _this = this;
      if (this["var"] && window[this["var"]]) {
        console.log("Already loaded", this.url);
        return;
      }
      this.wait = true;
      this.script = document.createElement("script");
      this.script.setAttribute("type", "text/javascript");
      this.head.appendChild(this.script);
      this.script.onload = function() {
        return _this.postLoad(callback);
      };
      t = Date.now();
      cache = this.url.indexOf("/puzlet/js") !== -1 || this.url.indexOf("http://") !== -1;
      return this.script.setAttribute("src", this.url + (cache ? "" : "?t=" + t));
    };

    return JsResourceLinked;

  })(Resource);

  CoffeeResource = (function(_super) {

    __extends(CoffeeResource, _super);

    function CoffeeResource() {
      return CoffeeResource.__super__.constructor.apply(this, arguments);
    }

    CoffeeResource.prototype.load = function(callback) {
      var _this = this;
      return CoffeeResource.__super__.load.call(this, function() {
        _this.element = $("<script>", {
          type: "text/javascript",
          "data-url": _this.url
        });
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    CoffeeResource.prototype.compile = function() {
      var js;
      js = CoffeeEvaluator.compile(this.content);
      this.element.text(js);
      return this.head.appendChild(this.element[0]);
    };

    return CoffeeResource;

  })(Resource);

  JsonResource = (function(_super) {

    __extends(JsonResource, _super);

    function JsonResource() {
      return JsonResource.__super__.constructor.apply(this, arguments);
    }

    JsonResource.prototype.load = function(callback) {
      return JsonResource.__super__.load.call(this, callback, "json");
    };

    return JsonResource;

  })(Resource);

  Resources = (function() {

    Resources.prototype.resourceTypes = {
      html: {
        blab: HtmlResource,
        ext: HtmlResource
      },
      css: {
        blab: CssResourceInline,
        ext: CssResourceLinked
      },
      js: {
        blab: JsResourceInline,
        ext: JsResourceLinked
      },
      coffee: {
        blab: CoffeeResource,
        ext: CoffeeResource
      },
      json: {
        blab: JsonResource,
        ext: JsonResource
      },
      py: {
        blab: Resource,
        ext: Resource
      },
      m: {
        blab: Resource,
        ext: Resource
      }
    };

    function Resources() {
      this.resources = [];
    }

    Resources.prototype.add = function(resourceSpecs) {
      var newResources, resource, spec, _i, _len;
      if (!resourceSpecs.length) {
        resourceSpecs = [resourceSpecs];
      }
      newResources = [];
      for (_i = 0, _len = resourceSpecs.length; _i < _len; _i++) {
        spec = resourceSpecs[_i];
        resource = this.createResource(spec);
        newResources.push(resource);
        this.resources.push(resource);
      }
      if (newResources.length === 1) {
        return newResources[0];
      } else {
        return newResources;
      }
    };

    Resources.prototype.createResource = function(spec) {
      var fileExt, location, url;
      url = spec.url;
      fileExt = Resource.getFileExt(url);
      location = url.indexOf("/") === -1 ? "blab" : "ext";
      spec.location = location;
      if (this.resourceTypes[fileExt]) {
        return new this.resourceTypes[fileExt][location](spec);
      } else {
        return null;
      }
    };

    Resources.prototype.load = function(filter, loaded) {
      var resource, resourceLoaded, resources, resourcesToLoad, _i, _len, _results,
        _this = this;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !resource.loaded && filter(resource);
      });
      if (resources.length === 0) {
        if (typeof loaded === "function") {
          loaded();
        }
        return;
      }
      resourcesToLoad = 0;
      resourceLoaded = function(resource) {
        resourcesToLoad--;
        if (resourcesToLoad === 0) {
          _this.appendToHead(filter);
          return typeof loaded === "function" ? loaded() : void 0;
        }
      };
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        resourcesToLoad++;
        _results.push(resource.load(function() {
          return resourceLoaded(resource);
        }));
      }
      return _results;
    };

    Resources.prototype.loadUnloaded = function(loaded) {
      return this.load((function() {
        return true;
      }), loaded);
    };

    Resources.prototype.appendToHead = function(filter) {
      var resource, resources, _i, _len, _results;
      filter = this.filterFunction(filter);
      resources = this.select(function(resource) {
        return !(typeof resource.inDom === "function" ? resource.inDom() : void 0) && (resource.appendToHead != null) && filter(resource);
      });
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        _results.push(resource.appendToHead());
      }
      return _results;
    };

    Resources.prototype.select = function(filter) {
      var resource, _i, _len, _ref, _results;
      filter = this.filterFunction(filter);
      _ref = this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (filter(resource)) {
          _results.push(resource);
        }
      }
      return _results;
    };

    Resources.prototype.filterFunction = function(filter) {
      if (typeof filter === "function") {
        return filter;
      } else {
        return Resource.typeFilter(filter);
      }
    };

    Resources.prototype.find = function(url) {
      var resource, _i, _len, _ref;
      _ref = this.resources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (resource.url === url) {
          return resource;
        }
      }
      return null;
    };

    return Resources;

  })();

  Ace = {};

  Ace.Resources = (function() {

    Resources.prototype.main = [
      {
        url: "/puzlet/js/ace4/ace.js"
      }
    ];

    Resources.prototype.modes = [
      {
        url: "/puzlet/js/ace4/mode-html.js"
      }, {
        url: "/puzlet/js/ace4/mode-css.js"
      }, {
        url: "/puzlet/js/ace4/mode-javascript.js"
      }, {
        url: "/puzlet/js/ace4/mode-coffee.js"
      }, {
        url: "/puzlet/js/ace4/mode-python.js"
      }, {
        url: "/puzlet/js/ace4/mode-matlab.js"
      }, {
        url: "/puzlet/js/ace4/mode-latex.js"
      }
    ];

    Resources.prototype.styles = [
      {
        url: "/puzlet/css/ace.css"
      }
    ];

    function Resources(load, loaded) {
      var _this = this;
      load(this.main, function() {
        return load(_this.modes, function() {
          return load(_this.styles, loaded);
        });
      });
    }

    return Resources;

  })();

  Ace.Languages = (function() {

    function Languages() {}

    Languages.list = {
      html: {
        ext: "html",
        mode: "html"
      },
      css: {
        ext: "css",
        mode: "css"
      },
      javascript: {
        ext: "js",
        mode: "javascript"
      },
      coffee: {
        ext: "coffee",
        mode: "coffee"
      },
      python: {
        ext: "py",
        mode: "python"
      },
      octave: {
        ext: "m",
        mode: "matlab"
      },
      latex: {
        ext: "tex",
        mode: "latex"
      }
    };

    Languages.get = function(lang) {
      return Ace.Languages.list[lang];
    };

    Languages.mode = function(lang) {
      return "ace/mode/" + (Ace.Languages.get(lang).mode);
    };

    Languages.langName = function(ext) {
      var language, name, _ref;
      _ref = Ace.Languages.list;
      for (name in _ref) {
        language = _ref[name];
        if (language.ext === ext) {
          return name;
        }
      }
    };

    return Languages;

  })();

  Ace.Editors = (function() {

    function Editors(findResource) {
      var container, editor, _i, _len, _ref;
      this.findResource = findResource;
      $pz.AceIdentifiers = Ace.Identifiers;
      this.containers = $("div[" + Ace.Editor.fileAttr + "]");
      this.editors = (function() {
        var _i, _len, _ref, _results;
        _ref = this.containers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          container = _ref[_i];
          _results.push(new Ace.Editor($(container), this.findResource));
        }
        return _results;
      }).call(this);
      $pz.codeNode = {};
      _ref = this.editors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        editor = _ref[_i];
        $pz.codeNode[editor.id] = editor;
      }
    }

    return Editors;

  })();

  Ace.Editor = (function() {

    Editor.fileAttr = "data-file";

    function Editor(container, findResource) {
      var mode;
      this.container = container;
      this.filename = this.container.attr(Ace.Editor.fileAttr);
      this.resource = findResource(this.filename);
      if (!this.resource) {
        return;
      }
      this.lang = Ace.Languages.langName(this.resource.fileExt);
      this.content = this.resource.content;
      this.id = "ace_editor_" + this.filename;
      this.initContainer();
      this.editor = ace.edit(this.id);
      this.editor.setTheme("ace/theme/textmate");
      if (this.lang) {
        mode = Ace.Languages.mode(this.lang);
      }
      if (mode) {
        this.session().setMode(mode);
      }
      this.session().setValue(this.content);
      this.initRenderer();
      this.initFont();
      this.setHeight();
      this.isEditable = false;
      this.editor.setReadOnly(true);
      this.renderer.$gutterLayer.setShowLineNumbers(false, 1);
      this.editor.setHighlightActiveLine(false);
      this.customRendering();
      this.inFocus = false;
    }

    Editor.prototype.initContainer = function() {
      this.container.addClass("code_node_container");
      this.outer = $("<div>", {
        "class": "code_node_editor_container"
      });
      this.editorContainer = $("<div>", {
        "class": "code_node_editor",
        id: this.id,
        "data-lang": "" + this.lang
      });
      this.outer.append(this.editorContainer);
      return this.container.append(this.outer);
    };

    Editor.prototype.initRenderer = function() {
      var id,
        _this = this;
      this.renderer = this.editor.renderer;
      id = this.id;
      this.renderer.scrollBar.setWidth = function(width) {
        if (width == null) {
          width = this.width || 15;
        }
        return $(this.element).css("width", width + "px");
      };
      this.renderer.scrollBar.setWidth(0);
      this.renderer.scroller.style.overflowX = "hidden";
      this.renderer.$textLayer.addEventListener("changeCharacterSize", function() {
        return _this.setHeight();
      });
      return this.renderer.$gutterLayer.setShowLineNumbers = function(show, start) {
        if (start == null) {
          start = 1;
        }
        this.showLineNumbers = show;
        return this.lineNumberStart = start;
      };
    };

    Editor.prototype.initFont = function() {
      var char, css;
      this.editorContainer.addClass("pz_ace_editor");
      css = {
        fontFamily: "Consolas, Menlo, DejaVu Sans Mono, Monaco, monospace",
        fontSize: "11pt",
        lineHeight: "150%"
      };
      char = $("<span>", {
        css: css,
        html: "m"
      });
      $("body").append(char);
      this.charWidth = char.width();
      char.remove();
      this.narrowFont = this.charWidth < 9;
      if (this.narrowFont) {
        css.fontSize = "12pt";
      }
      return this.editorContainer.css(css);
    };

    Editor.prototype.setHeight = function() {
      var heightStr, l, lengths, lineHeight, lines, max, numLines;
      if (!this.editor) {
        return;
      }
      lines = this.code().split("\n");
      numLines = lines.length;
      if (numLines < 20) {
        lengths = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            l = lines[_i];
            _results.push(l.length);
          }
          return _results;
        })();
        max = Math.max.apply(Math, lengths);
        if (max > 75) {
          numLines++;
        }
      } else {
        numLines++;
      }
      lineHeight = this.renderer.lineHeight;
      if (this.numLines === numLines && this.lineHeight === lineHeight) {
        return;
      }
      this.numLines = numLines;
      this.lineHeight = lineHeight;
      heightStr = lineHeight * (numLines > 0 ? numLines : 1) + "px";
      this.editorContainer.css("height", heightStr);
      this.outer.css("height", heightStr);
      return this.editor.resize();
    };

    Editor.prototype.customRendering = function() {
      var onBlur, onFocus,
        _this = this;
      this.linkSelected = false;
      this.comments = [];
      this.functions = [];
      this.editor.setShowFoldWidgets(false);
      this.renderer.$gutterLayer.setShowLineNumbers(true, 1);
      onFocus = this.editor.onFocus;
      this.editor.onFocus = function() {
        _this.restoreCode();
        onFocus.call(_this.editor);
        if (_this.isEditable) {
          _this.renderer.showCursor();
        }
        if (!_this.isEditable) {
          _this.renderer.hideCursor();
        }
        _this.editor.setHighlightActiveLine(true);
        return _this.inFocus = true;
      };
      onBlur = this.editor.onBlur;
      this.editor.onBlur = function() {
        _this.renderer.hideCursor();
        _this.editor.setHighlightActiveLine(false);
        _this.render();
        return _this.inFocus = false;
      };
      this.editor.on("mouseup", function(aceEvent) {
        return _this.mouseUpHandler();
      });
      return $(document).on("mathjaxPreConfig", function() {
        return window.MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
          return _this.render();
        });
      });
    };

    Editor.prototype.render = function() {
      var comment, commentNodes, f, i, identifiers, l, linkCallback, node, _i, _j, _len, _len1, _ref, _ref1, _results,
        _this = this;
      if (!window.MathJax) {
        return;
      }
      if (!$blab.codeDecoration) {
        return;
      }
      commentNodes = this.editorContainer.find(".ace_comment");
      linkCallback = function(target) {
        return _this.linkSelected = target;
      };
      this.comments = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = commentNodes.length; _i < _len; _i++) {
          node = commentNodes[_i];
          _results.push(new CodeNodeComment($(node), linkCallback));
        }
        return _results;
      })();
      _ref = this.comments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comment = _ref[_i];
        comment.render();
      }
      identifiers = this.editorContainer.find(".ace_identifier");
      this.functions = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = identifiers.length; _j < _len1; _j++) {
          i = identifiers[_j];
          if (l = Ace.Identifiers.link($(i).text())) {
            _results.push(new CodeNodeFunction($(i), l, linkCallback));
          }
        }
        return _results;
      })();
      _ref1 = this.functions;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        _results.push(f.render());
      }
      return _results;
    };

    Editor.prototype.restoreCode = function() {
      var comment, f, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.comments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        comment = _ref[_i];
        comment.restore();
      }
      _ref1 = this.functions;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        f = _ref1[_j];
        _results.push(f.restore());
      }
      return _results;
    };

    Editor.prototype.mouseUpHandler = function() {
      var href, target;
      if (!this.linkSelected) {
        return;
      }
      href = this.linkSelected.attr("href");
      target = this.linkSelected.attr("target");
      if (target === "_self") {
        $(document.body).animate({
          scrollTop: $(href).offset().top
        }, 1000);
      } else {
        window.open(href, target != null ? target : "_blank");
      }
      this.linkSelected = false;
      return this.editor.blur();
    };

    Editor.prototype.focus = function() {
      return this.editor.focus();
    };

    Editor.prototype.session = function() {
      if (this.editor) {
        return this.editor.getSession();
      } else {
        return null;
      }
    };

    Editor.prototype.code = function() {
      return this.session().getValue();
    };

    Editor.prototype.show = function(show) {
      return this.outer.css("display", show ? "" : "none");
    };

    Editor.prototype.showCode = function(show) {
      this.editor.show(show);
      if (show) {
        return this.editor.resize();
      }
    };

    return Editor;

  })();

  Ace.Identifiers = (function() {

    function Identifiers() {}

    Identifiers.links = {};

    Identifiers.registerLinks = function(links) {
      var identifier, link, _results;
      _results = [];
      for (identifier in links) {
        link = links[identifier];
        _results.push(Ace.Identifiers.links[identifier] = link);
      }
      return _results;
    };

    Identifiers.link = function(name) {
      return Ace.Identifiers.links[name];
    };

    return Identifiers;

  })();

  CodeNodeComment = (function() {

    function CodeNodeComment(node, linkCallback) {
      this.node = node;
      this.linkCallback = linkCallback;
    }

    CodeNodeComment.prototype.render = function() {
      this.originalText = this.node.text();
      this.replaceDiv();
      this.mathJax();
      return this.processLinks();
    };

    CodeNodeComment.prototype.replaceDiv = function() {
      var comment, content, pattern, re;
      pattern = String.fromCharCode(160);
      re = new RegExp(pattern, "g");
      comment = this.originalText.replace(re, " ");
      this.node.empty();
      content = $("<div>", {
        css: {
          display: "inline-block"
        }
      });
      content.append(comment);
      return this.node.append(content);
    };

    CodeNodeComment.prototype.mathJax = function() {
      var node;
      if (!(node = this.node[0])) {
        return;
      }
      MathJax.Hub.Queue(["PreProcess", MathJax.Hub, node]);
      return MathJax.Hub.Queue(["Process", MathJax.Hub, node]);
    };

    CodeNodeComment.prototype.processLinks = function() {
      var link, links, _i, _len, _results,
        _this = this;
      links = this.node.find("a");
      if (!links.length) {
        return;
      }
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        _results.push($(link).mousedown(function(evt) {
          return _this.linkCallback($(evt.target));
        }));
      }
      return _results;
    };

    CodeNodeComment.prototype.restore = function() {
      if (this.originalText) {
        this.node.empty();
        return this.node.text(this.originalText);
      }
    };

    return CodeNodeComment;

  })();

  CodeNodeFunction = (function() {

    function CodeNodeFunction(node, link, linkCallback) {
      this.node = node;
      this.link = link;
      this.linkCallback = linkCallback;
    }

    CodeNodeFunction.prototype.render = function() {
      this.originalText = this.node.text();
      this.replaceDiv();
      return this.processLinks();
    };

    CodeNodeFunction.prototype.replaceDiv = function() {
      var content, link, txt;
      txt = this.originalText;
      link = $("<a>", {
        href: this.link.href,
        target: this.link.target,
        text: txt
      });
      this.node.empty();
      content = $("<div>", {
        css: {
          display: "inline-block"
        }
      });
      content.append(link);
      return this.node.append(content);
    };

    CodeNodeFunction.prototype.mathJax = function() {
      var node;
      if (!(node = this.node[0])) {
        return;
      }
      MathJax.Hub.Queue(["PreProcess", MathJax.Hub, node]);
      return MathJax.Hub.Queue(["Process", MathJax.Hub, node]);
    };

    CodeNodeFunction.prototype.processLinks = function() {
      var link, links, _i, _len, _results,
        _this = this;
      links = this.node.find("a");
      if (!links.length) {
        return;
      }
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        _results.push($(link).mousedown(function(evt) {
          return _this.linkCallback($(evt.target));
        }));
      }
      return _results;
    };

    CodeNodeFunction.prototype.restore = function() {
      if (this.originalText) {
        this.node.empty();
        return this.node.text(this.originalText);
      }
    };

    return CodeNodeFunction;

  })();

  Loader = (function() {
    /*
    	[
    		"main.html",
    		"style.css",
    		"bar.js",
    		"foo.coffee",
    		"main.coffee",
    		"/some-repo/snippet.html",
    		"/other-repo/foo.css",
    		"/puzlet/js/d3.min.js",
    		"http://domain.com/script.js",
    		"/ode-fixed/ode.coffee"
    	]
    */

    Loader.prototype.coreResources = [
      {
        url: "http://code.jquery.com/jquery-1.8.3.min.js",
        "var": "jQuery"
      }, {
        url: "/puzlet/js/wiky.js",
        "var": "Wiky"
      }
    ];

    Loader.prototype.resourcesList = {
      url: "resources.json"
    };

    Loader.prototype.htmlResources = [
      {
        url: "/puzlet/css/coffeelab.css"
      }
    ];

    Loader.prototype.scriptResources = [
      {
        url: "/puzlet/js/coffeescript.js"
      }, {
        url: "/puzlet/js/acorn.js"
      }, {
        url: "/puzlet/js/numeric-1.2.6.js"
      }, {
        url: "/puzlet/js/compile.js"
      }
    ];

    function Loader(blab, render, done) {
      var _this = this;
      this.blab = blab;
      this.render = render;
      this.done = done;
      this.resources = new Resources;
      this.loadCoreResources(function() {
        return _this.loadResourceList(function() {
          return _this.loadHtmlCss(function() {
            return _this.loadScripts(function() {
              return _this.loadAce(function() {
                return _this.done();
              });
            });
          });
        });
      });
    }

    Loader.prototype.loadCoreResources = function(callback) {
      this.resources.add(this.coreResources);
      return this.resources.loadUnloaded(callback);
    };

    Loader.prototype.loadResourceList = function(callback) {
      var list,
        _this = this;
      list = this.resources.add(this.resourcesList);
      return this.resources.loadUnloaded(function() {
        var url;
        _this.resources.add(_this.htmlResources);
        _this.resources.add(_this.scriptResources);
        _this.resources.add((function() {
          var _i, _len, _ref, _results;
          _ref = list.content;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            url = _ref[_i];
            _results.push({
              url: url
            });
          }
          return _results;
        })());
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadHtmlCss = function(callback) {
      var _this = this;
      return this.resources.load(["html", "css"], function() {
        var html, _i, _len, _ref;
        _ref = _this.resources.select("html");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          html = _ref[_i];
          _this.render(html.content);
        }
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadScripts = function(callback) {
      var _this = this;
      return this.resources.load(["js", "coffee", "py", "m"], function() {
        _this.compileCoffee();
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Loader.prototype.loadAce = function(callback) {
      var load,
        _this = this;
      load = function(resources, callback) {
        _this.resources.add(resources);
        return _this.resources.load(["js", "css"], function() {
          return typeof callback === "function" ? callback() : void 0;
        });
      };
      return new Ace.Resources(load, callback);
    };

    Loader.prototype.compileCoffee = function() {
      var coffee, _i, _len, _ref, _results;
      _ref = this.resources.select("coffee");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coffee = _ref[_i];
        _results.push(coffee.compile());
      }
      return _results;
    };

    return Loader;

  })();

  Page = (function() {

    function Page(blab) {
      this.blab = blab;
    }

    Page.prototype.mainContainer = function() {
      if (this.container != null) {
        return;
      }
      this.container = $("<div>", {
        id: "blab_container"
      });
      this.container.hide();
      $(document.body).append(this.container);
      return this.container.show();
    };

    Page.prototype.render = function(wikyHtml) {
      if (this.container == null) {
        this.mainContainer();
      }
      this.container.append(Wiky.toHtml(wikyHtml));
      return this.pageTitle(wikyHtml);
    };

    Page.prototype.ready = function(resources) {
      var _this = this;
      this.resources = resources;
      new Ace.Editors(function(url) {
        return _this.resources.find(url);
      });
      new MathJaxProcessor;
      new FavIcon;
      return new GithubRibbon(this.container, this.blab);
    };

    Page.prototype.pageTitle = function(wikyHtml) {
      var matches;
      matches = wikyHtml.match(/[^|\n][=]{1,6}(.*?)[=]{1,6}[^a-z0-9][\n|$]/);
      if (matches != null ? matches.length : void 0) {
        return document.title = matches[1];
      }
    };

    return Page;

  })();

  FavIcon = (function() {

    function FavIcon() {
      var icon;
      icon = $("<link>", {
        rel: "icon",
        type: "image/png",
        href: "/puzlet/images/favicon.ico"
      });
      $(document.head).append(icon);
    }

    return FavIcon;

  })();

  GithubRibbon = (function() {

    function GithubRibbon(container, blab) {
      var html, src;
      this.container = container;
      this.blab = blab;
      src = "https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67";
      html = "<a href=\"https://github.com/puzlet/" + this.blab + "\" id=\"ribbon\" style=\"opacity:0.2\">\n<img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"" + src + "\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\"></a>";
      this.container.append(html);
      setTimeout((function() {
        return $("#ribbon").fadeTo(400, 1).fadeTo(400, 0.2);
      }), 2000);
    }

    return GithubRibbon;

  })();

  MathJaxProcessor = (function() {

    MathJaxProcessor.prototype.source = "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default";

    MathJaxProcessor.prototype.mode = "HTML-CSS";

    function MathJaxProcessor() {
      var configScript, mathjax,
        _this = this;
      this.outputId = "blab_container";
      $blab.mathjaxConfig = function() {
        $.event.trigger("mathjaxPreConfig");
        window.MathJax.Hub.Config({
          jax: ["input/TeX", "output/" + _this.mode],
          tex2jax: {
            inlineMath: [["$", "$"], ["\\(", "\\)"]]
          },
          TeX: {
            equationNumbers: {
              autoNumber: "AMS"
            }
          },
          elements: [_this.outputId, "blab_refs"],
          showProcessingMessages: false,
          MathMenu: {
            showRenderer: true
          }
        });
        return window.MathJax.HTML.Cookie.Set("menu", {
          renderer: _this.mode
        });
      };
      configScript = $("<script>", {
        type: "text/x-mathjax-config",
        text: "$blab.mathjaxConfig();"
      });
      mathjax = $("<script>", {
        type: "text/javascript",
        src: this.source
      });
      $("head").append(configScript).append(mathjax);
      $(document).on("htmlOutputUpdated", function() {
        return _this.process();
      });
    }

    MathJaxProcessor.prototype.process = function() {
      var Hub, configElements, queue,
        _this = this;
      if (typeof MathJax === "undefined" || MathJax === null) {
        return;
      }
      this.id = this.outputId;
      Hub = MathJax.Hub;
      queue = function(x) {
        return Hub.Queue(x);
      };
      queue(["PreProcess", Hub, this.id]);
      queue(["Process", Hub, this.id]);
      configElements = function() {
        return Hub.config.elements = [_this.id];
      };
      return queue(configElements);
    };

    return MathJaxProcessor;

  })();

  CoffeeEvaluator = (function() {

    function CoffeeEvaluator() {}

    CoffeeEvaluator.compile = function(code, bare) {
      var js, _ref;
      if (bare == null) {
        bare = false;
      }
      if ((_ref = CoffeeEvaluator.blabCoffee) == null) {
        CoffeeEvaluator.blabCoffee = new BlabCoffee;
      }
      return js = CoffeeEvaluator.blabCoffee.compile(code, bare);
    };

    CoffeeEvaluator["eval"] = function(code, js) {
      if (js == null) {
        js = null;
      }
      if (!js) {
        js = CoffeeEvaluator.compile(code);
      }
      eval(js);
      return js;
    };

    return CoffeeEvaluator;

  })();

  init = function() {
    var blab, loader, page, ready, render;
    window.$pz = {};
    window.$blab = {};
    if (window.console == null) {
      window.console = {};
    }
    if (window.console.log == null) {
      window.console.log = (function() {});
    }
    blab = window.location.pathname.split("/")[1];
    if (!(blab && blab !== "puzlet.github.io")) {
      return;
    }
    page = new Page(blab);
    render = function(wikyHtml) {
      return page.render(wikyHtml);
    };
    ready = function() {
      return page.ready(loader.resources);
    };
    return loader = new Loader(blab, render, ready);
  };

  init();

  getBlabFromQuery = function() {
    var blab, h, p, query;
    query = location.search.slice(1);
    if (!query) {
      return null;
    }
    h = query.split("&");
    p = h != null ? h[0].split("=") : void 0;
    return blab = p.length && p[0] === "blab" ? p[1] : null;
  };

}).call(this);
